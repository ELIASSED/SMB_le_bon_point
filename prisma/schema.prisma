generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Relance {
  id            Int      @id @default(autoincrement())
  email         String
  firstName     String
  lastName      String
  phone         String
  userId        Int
  lastSessionId Int?     // nullable
  profession    String?  // nullable
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  session Session? @relation(fields: [lastSessionId], references: [id]) // session is now optional

  @@unique([userId, lastSessionId])
}

model User {
  id                  Int          @id @default(autoincrement())
  civilite            String
  nom                 String
  prenom              String
  prenom1             String?      
  prenom2             String?      
  adresse             String
  codePostal          String
  ville               String
  telephone           String
  email               String       @unique
  nationalite         String
  dateNaissance       DateTime        
  codePostalNaissance String
  createdAt           DateTime     @default(now())
  
  // Champs pour le suivi des relances
  relanceCount        Int          @default(0)
  lastRelanceAt       DateTime?
  
  // Champs pour les scans d'images confidentielles
  id_recto          String?      
  id_verso          String?   
  permis_recto          String?      
  permis_verso          String?      
  
  // Champs déplacés depuis SessionUsers
  numeroPermis         String
  dateDelivrancePermis DateTime
  prefecture           String
  etatPermis           String
  casStage             String

  // Champ de statut de paiement global
  isPaid              Boolean      @default(false)

  // Relations
  sessionUsers        SessionUsers[]
  relances            Relance[]
}

model SessionUsers {
  id                   Int          @id @default(autoincrement())
  sessionId            Int
  userId               Int
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  isArchived           Boolean      @default(false)

  // Relations
  session   Session      @relation(fields: [sessionId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  payments  Payment[]    // New relation to Payment

  @@unique([sessionId, userId]) // Un utilisateur ne peut s'inscrire qu'une fois à une session
}

model Session {
  id              Int          @id @default(autoincrement())
  numeroStageAnts String
  price           Float        @default(200.0)
  description     String
  startDate       DateTime
  endDate         DateTime
  location        String
  capacity        Int          @default(20)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  instructorId    Int
  psychologueId   Int
  isArchived      Boolean      @default(false)

  // Relations
  instructor   Instructor   @relation(fields: [instructorId], references: [id])
  psychologue  Psychologue  @relation(fields: [psychologueId], references: [id])
  users        SessionUsers[]
  relances     Relance[]
}

model Instructor {
  id                              Int        @id @default(autoincrement())
  email                           String     @unique
  firstName                       String
  lastName                        String
  numeroAutorisationPrefectorale  String
  phone                           String     // numéro de téléphone
  createdAt                       DateTime   @default(now())
  updatedAt                       DateTime   @updatedAt
  isArchived                      Boolean    @default(false)

  // Relations
  sessions Session[]
}

model Psychologue {
  id                              Int        @id @default(autoincrement())
  email                           String     @unique
  firstName                       String
  lastName                        String
  numeroAutorisationPrefectorale  String
  phone                           String     // numéro de téléphone
  createdAt                       DateTime   @default(now())
  updatedAt                       DateTime   @updatedAt
  isArchived                      Boolean    @default(false)

  // Relations
  sessions Session[]
}

model Payment {
  id            Int            @id @default(autoincrement())
  sessionUserId Int
  amount        Float
  method        String
  paidAt        DateTime       @default(now())

  // Relation moved to SessionUsers
  sessionUser   SessionUsers   @relation(fields: [sessionUserId], references: [id])
}
