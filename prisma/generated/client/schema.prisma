generator client {
  provider = "prisma-client-js"
  output   = "./generated/client" // Add this line
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   Int            @id @default(autoincrement())
  civilite             String
  nom                  String
  prenom               String
  prenom1              String?
  prenom2              String?
  adresse              String
  codePostal           String
  ville                String
  telephone            String
  email                String
  nationalite          String
  dateNaissance        DateTime
  codePostalNaissance  String
  createdAt            DateTime       @default(now())
  id_recto             String?
  id_verso             String?
  permis_recto         String?
  permis_verso         String?
  letter_48N           String?
  extraDocument        String?
  numeroPermis         String
  dateDelivrancePermis DateTime
  prefecture           String
  etatPermis           String
  casStage             String
  attestationPdf       Bytes?
  sessionUsers         SessionUsers[]
}

model SessionUsers {
  id              Int       @id @default(autoincrement())
  sessionId       Int
  userId          Int
  isPaid          Boolean   @default(false)
  isArchived      Boolean   @default(false)
  paymentIntentId String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  payments        Payment[]
  session         Session   @relation(fields: [sessionId], references: [id])
  user            User      @relation(fields: [userId], references: [id])

  @@unique([sessionId, userId])
}

model Session {
  id                  Int            @id @default(autoincrement())
  numeroStageAnts     String
  price               Float          @default(200.0)
  description         String?
  startDate           DateTime
  endDate             DateTime
  location            String?
  capacity            Int            @default(20)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  instructorId        Int
  psychologueId       Int
  attendanceSheetPdf  Bytes?
  certificateSheetPdf Bytes?
  isArchived          Boolean        @default(false)
  instructor          Instructor     @relation(fields: [instructorId], references: [id])
  psychologue         Psychologue    @relation(fields: [psychologueId], references: [id])
  users               SessionUsers[]
}

model Instructor {
  id                             Int       @id @default(autoincrement())
  email                          String    @unique
  firstName                      String
  lastName                       String
  numeroAutorisationPrefectorale String
  phone                          String
  createdAt                      DateTime  @default(now())
  updatedAt                      DateTime  @updatedAt
  isArchived                     Boolean   @default(false)
  sessions                       Session[]
}

model Psychologue {
  id                             Int       @id @default(autoincrement())
  email                          String    @unique
  firstName                      String
  lastName                       String
  numeroAutorisationPrefectorale String
  phone                          String
  createdAt                      DateTime  @default(now())
  updatedAt                      DateTime  @updatedAt
  isArchived                     Boolean   @default(false)
  sessions                       Session[]
}

model Payment {
  id             Int          @id @default(autoincrement())
  sessionUserId  Int
  amount         Float
  method         String
  status         String? // Add for COMPLETED, FAILED, REFUNDED
  currency       String? // Add for currency (e.g., USD, EUR)
  notes          String? // Add for payment method details
  refundedAmount Float? // Add for refund amount
  refundedAt     DateTime? // Add for refund timestamp
  paidAt         DateTime     @default(now())
  sessionUser    SessionUsers @relation(fields: [sessionUserId], references: [id])
}
